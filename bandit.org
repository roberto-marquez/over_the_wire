
* Bandit
  :PROPERTIES:
  :header-args: :session bandit
  :header-args+: :dir /ssh:bandit0@bandit.labs.overthewire.org#2220:~
  :header-args+: :results output
  :END:

** USEFUL COMMANDS:
*** Connect to overthewire machine: 
    ssh ssh://bandit0@bandit.labs.overthewire.org:2220
*** Temporary directory in overthewire machine:
    cd /tmp/tmp.vfNEgFSJ6y

** LEVEL_0
   The goal of this level is for you to log into the game using SSH.
   The host to which you need to connect is bandit.labs.overthewire.org, on port 2220.
   The username is bandit0 and the password is bandit0.
   
  #+HEADER: :session bandit0
  #+HEADER: :dir /ssh:bandit0@bandit.labs.overthewire.org#2220:~
  #+HEADER: :results output
  #+BEGIN_SRC shell
  cat readme
  #+END_SRC

  #+RESULTS:
  : boJ9jbbUNNfktd78OOpsqOltutMc3MY1

  The password for bandit1 is found in plain text in the readme file.
  It is: boJ9jbbUNNfktd78OOpsqOltutMc3MY1

** LEVEL_1
   password : boJ9jbbUNNfktd78OOpsqOltutMc3MY1   

   The password for the next level is stored in a file called readme located in
   the home directory.
   Use this password to log into bandit1 using SSH. Whenever you find a password 
   for a level, use SSH (on port 2220) to log into that level and continue the game.

   #+HEADER: :session bandit1
   #+HEADER: :dir /ssh:bandit1@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat ./-
   #+END_SRC

   #+RESULTS:
   : 
   : CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
   
   The password is located in the file "-".
   The trick is that this filename gets interpreted as the start for a command option.
   You need to prepend the file name with ./ (local directory) or to use --
   to indicate the end of options for the command. 
   NOTE: the -- approach would still fail for the "-" filename. It will report
   information for the file open on stdin instead of the - file in the current dir.

   password: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

** LEVEL_2
   password: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
   
   #+HEADER: :session bandit2
   #+HEADER: :dir /ssh:bandit2@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat "spaces in this filename"
   #+END_SRC

   #+RESULTS:
   : 
   : UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

   This one is pretty simple the file has spaces in it's name so you need to
   use quotation when referencing it.

   password: UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

** LEVEL_3
   password: UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
   
   #+HEADER: :session bandit3
   #+HEADER: :dir /ssh:bandit3@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat inhere/.hidden 
   #+END_SRC

   #+RESULTS:
   : 
   : pIwrPrtPN36QITSp3EQaw936yaFoFgAB

   The password file (.hidden) is located inside the directory 'inhere'.
   The file is a hidden file so you need to use the -la option when calling
   ls for the file to be listed.

   password: pIwrPrtPN36QITSp3EQaw936yaFoFgAB

** LEVEL_4
   password: pIwrPrtPN36QITSp3EQaw936yaFoFgAB

   The password is found in "~/inhere/-file07".

   password: koReBOKuIDDepwhWk7jZC0RTdopnAYKh

** LEVEL_5
   password: koReBOKuIDDepwhWk7jZC0RTdopnAYKh

   Exectuted this command to find the file:
   find . -size 1033c ! -executable -exec cat '{}' \;
   Googled around and found that the file had to be not executable and its size was 1033 bytes.

   password : DXjZPULLxYr17uwoI01bNLQbtFemEgo7

   
** LEVEL_6
   password: DXjZPULLxYr17uwoI01bNLQbtFemEgo7

   go to root directory and run command find on the current 
   directory with the appropiate options.
   You'll get errors for all directories you do not have permission
   to access but the list is not too big. And in the list you'll find
   the file:
   ./var/lib/dpkg/info/bandit7.password

   password: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs


** LEVEL_7
   password: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs

   Just use grep on the data.txt with the word 'millionth' and you'll find the password
   
   password: cvX2JJa4CFALtqS87jk27qwqGhBM9plV

** LEVEL_8
   password: cvX2JJa4CFALtqS87jk27qwqGhBM9plV

   This one was interesting. One needs to be very careful when reading the man pages.
   uniq only removes duplicate when they are adjacent. That is the reason why we first
   need to sort the lines and after that pipe the result into the uniq call.
   Running this command will give you the password:
   sort data.txt | uniq -u

   password: UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

** LEVEL_9
   password: UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

   For this challenge you need to extract all the strings from the binary file by
   using the 'strings' commands and then pipe it into grep.
   I used this command:   strings data.txt | grep -E "^==+"
   and one of the three matching lines had the password.
   Take note that grep uses standard regular expressions by default so to use
   the + quantifier you have to either escape it or activate the extended regular
   expression support by using the -E option.

   password: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

** LEVEL_10
   password: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

   password:
