
* Bandit
  :PROPERTIES:
  :header-args: :session bandit
  :header-args+: :dir /ssh:bandit0@bandit.labs.overthewire.org#2220:~
  :header-args+: :results output
  :END:

** USEFUL COMMANDS:
*** Connect to overthewire machine: 
    ssh ssh://bandit0@bandit.labs.overthewire.org:2220
*** Temporary directory in overthewire machine:
    cd /tmp/tmp.6gSyB9Dgyz

** LEVEL_0
   The goal of this level is for you to log into the game using SSH.
   The host to which you need to connect is bandit.labs.overthewire.org, on port 2220.
   The username is bandit0 and the password is bandit0.
   
  #+HEADER: :session bandit0
  #+HEADER: :dir /ssh:bandit0@bandit.labs.overthewire.org#2220:~
  #+HEADER: :results output
  #+BEGIN_SRC shell
  cat readme
  #+END_SRC

  #+RESULTS:
  : boJ9jbbUNNfktd78OOpsqOltutMc3MY1

  The password for bandit1 is found in plain text in the readme file.
  It is: boJ9jbbUNNfktd78OOpsqOltutMc3MY1

** LEVEL_1
   password : boJ9jbbUNNfktd78OOpsqOltutMc3MY1

   The password for the next level is stored in a file called readme located in
   the home directory.
   Use this password to log into bandit1 using SSH. Whenever you find a password 
   for a level, use SSH (on port 2220) to log into that level and continue the game.

   #+HEADER: :session bandit1
   #+HEADER: :dir /ssh:bandit1@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat ./-
   #+END_SRC

   #+RESULTS:
   : 
   : CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
   
   The password is located in the file "-".
   The trick is that this filename gets interpreted as the start for a command option or stdin.
   You need to prepend the file name with ./ (local directory) or to use --
   to indicate the end of options for the command. 
   NOTE: the -- approach would still fail for the "-" filename. It will report
   information for the file open on stdin instead of the - file in the current dir.

   password: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9

** LEVEL_2
   password: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
   
   #+HEADER: :session bandit2
   #+HEADER: :dir /ssh:bandit2@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat "spaces in this filename"
   #+END_SRC

   #+RESULTS:
   : 
   : UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

   This one is pretty simple the file has spaces in it's name so you need to
   use quotation when referencing it.

   password: UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK

** LEVEL_3
   password: UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
   
   #+HEADER: :session bandit3
   #+HEADER: :dir /ssh:bandit3@bandit.labs.overthewire.org#2220:~
   #+HEADER: :results output
   #+BEGIN_SRC shell
   cat inhere/.hidden 
   #+END_SRC

   #+RESULTS:
   : 
   : pIwrPrtPN36QITSp3EQaw936yaFoFgAB

   The password file (.hidden) is located inside the directory 'inhere'.
   The file is a hidden file so you need to use the -la option when calling
   ls for the file to be listed.

   password: pIwrPrtPN36QITSp3EQaw936yaFoFgAB

** LEVEL_4
   password: pIwrPrtPN36QITSp3EQaw936yaFoFgAB

   The password is found in "~/inhere/-file07".

   password: koReBOKuIDDepwhWk7jZC0RTdopnAYKh

** LEVEL_5
   password: koReBOKuIDDepwhWk7jZC0RTdopnAYKh

   Exectuted this command to find the file:
   find . -size 1033c ! -executable -exec cat '{}' \;
   Googled around and found that the file had to be not executable and its size was 1033 bytes.

   password : DXjZPULLxYr17uwoI01bNLQbtFemEgo7
   
** LEVEL_6
   password: DXjZPULLxYr17uwoI01bNLQbtFemEgo7

   go to root directory and run command find on the current 
   directory with the appropiate options.
   You'll get errors for all directories you do not have permission
   to access but the list is not too big. And in the list you'll find
   the file:
   ./var/lib/dpkg/info/bandit7.password

   password: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs

** LEVEL_7
   password: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs

   Just use grep on the data.txt with the word 'millionth' and you'll find the password
   
   password: cvX2JJa4CFALtqS87jk27qwqGhBM9plV

** LEVEL_8
   password: cvX2JJa4CFALtqS87jk27qwqGhBM9plV

   This one was interesting. One needs to be very careful when reading the man pages.
   uniq only removes duplicate when they are adjacent. That is the reason why we first
   need to sort the lines and after that pipe the result into the uniq call.
   Running this command will give you the password:
   sort data.txt | uniq -u

   password: UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

** LEVEL_9
   password: UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR

   For this challenge you need to extract all the strings from the binary file by
   using the 'strings' commands and then pipe it into grep.
   I used this command:   strings data.txt | grep -E "^==+"
   and one of the three matching lines had the password.
   Take note that grep uses standard regular expressions by default so to use
   the + quantifier you have to either escape it or activate the extended regular
   expression support by using the -E option.

   password: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

** LEVEL_10
   password: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk

   The password is base64 encoded. Just run this command:
   cat data.txt | base64 -d

   password: IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR

** LEVEL_11
   password: IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR

   You need to replace each character with the equivalent char after using rot13.
   This command will do it:
   cat data.txt | tr a-zA-Z n-za-mN-ZA-M

   password: 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu

** LEVEL_12
   password: 5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu

   This one took a while, you need to use xxd -r to revert the hexdump and
   after that you can either check the header byte of the file to check the
   type of compression that was used or you can use the command 'file'.
   Note: 
   you can also use the different compression commands to check the integrity of
   the file effectively giving you the same information.

   After getting the initial binary the following commands were used multiple
   times to decompress the file: bzip2, gzip, tar

   password: 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL

** LEVEL_13
   password: 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL

   This one is pretty simple just use ssh to login as bandit14 and look at file
   /etc/bandit_pass/bandit14.

   password: 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e

** LEVEL_14
   password: 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e

   Use netcat to send the password to localhost 30000.
   echo "4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e" | nc localhost 30000

   password: BfMYroe26WYalil77FoDi9qh59eK5xNr

** LEVEL_15
   password: BfMYroe26WYalil77FoDi9qh59eK5xNr
   
   Open a ssl connection and keep it alive using the following command:
   openssl s_client -ign_eof -connect localhost:30001
   Once the connection is open send the password.

   password: cluFn7wTiGryunymYOu4RcffSxQluehd

** LEVEL_16
   password: cluFn7wTiGryunymYOu4RcffSxQluehd

   Used the command 'nmap -p31000-32000 localhost' to scan those port with the 
   following result:
   Starting Nmap 7.40 ( https://nmap.org ) at 2019-12-01 04:01 CET
   Nmap scan report for localhost (127.0.0.1)
   Host is up (0.00027s latency).
   Not shown: 999 closed ports
   PORT      STATE    SERVICE
   31518/tcp filtered unknown
   31790/tcp open     unknown

   Nmap done: 1 IP address (1 host up) scanned in 1.26 seconds

   Then I stablished an ssl connection using on the only open port using:
   'openssl s_client -ign_eof -connect localhost:31790'
   after stabishing the connection I sent the password and got back an RSA
   private key.

   response:

-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ
imZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ
Ja6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu
DSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW
JGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX
x0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD
KHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl
J9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd
d8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC
YNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A
vLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama
+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT
8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx
SatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd
HCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt
SghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A
R57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi
Ttiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg
R8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu
L8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni
blh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU
YOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM
77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b
dxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3
vBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=
-----END RSA PRIVATE KEY-----

** LEVEL_17
   
   I saved the rsa key in a file called bandit17.key and used it to access
   bandit17 using ssh. NOTE: I got a warning when using the key the first time
   because the file had the default permissions of any file. I ran chmod 600 to
   only give read and write permissions to the current user and that fixed the
   problem.

   Ran the following command to find the changed line between the password files:
   diff --suppress-common-lines passwords.old passwords.new
   
   password: kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd

** LEVEL_18
   
   password: kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
   
   The password for this level is in a readme file in the home directory for the user.
   Because the .bashrc file has code to log you out immediately you can just execute the
   cat command through ssh (making it an non-interactive shell and as such not running 
   initialisation files).

   ssh ssh://bandit18@bandit.labs.overthewire.org:2220 cat readme

   password: IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x

** LEVEL_19
   
   password: IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x

   Run command:
   ./bandit20-do cat /etc/bandit_pass/bandit20

   password: GbKksEFF4yrVs6il55v6gwY5aVje5f0j
   
** LEVEL_20

   password: GbKksEFF4yrVs6il55v6gwY5aVje5f0j

   Run this command to setup a tcp server listening on port 9999 that will return the
   required password:
   echo "GbKksEFF4yrVs6il55v6gwY5aVje5f0j" | nc -l -p  9999 &
   
   Run the following command to get the password from the suconnect program:
   ./suconnect 9999

   result:
   Read: GbKksEFF4yrVs6il55v6gwY5aVje5f0j
   Password matches, sending next password
   gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr

   password: gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
   
** LEVEL_21

   password: gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr

   Run the following commands to check the cron job that is being executed:
   less /etc/cron.d/cronjob_bandit22

   result:
   @reboot bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null
   \* * * * * bandit22 /usr/bin/cronjob_bandit22.sh &> /dev/null

   Check the cronjob_bandit22.sh file:
   less /usr/bin/cronjob_bandit22.sh
   
   result:
   #!/bin/bash
   chmod 644 /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
   cat /etc/bandit_pass/bandit22 > /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv

   Check the file /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv
   result:
   Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

   password: Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

** LEVEL_22
   
   password: Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI

   password: 
